/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __WIFI_CONNECT_DBUS_GEN_H__
#define __WIFI_CONNECT_DBUS_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1 */

#define TYPE_WPASUPPLICANT (wpasupplicant_get_type ())
#define WPASUPPLICANT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT, WPASupplicant))
#define IS_WPASUPPLICANT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT))
#define WPASUPPLICANT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_WPASUPPLICANT, WPASupplicantIface))

struct _WPASupplicant;
typedef struct _WPASupplicant WPASupplicant;
typedef struct _WPASupplicantIface WPASupplicantIface;

struct _WPASupplicantIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_create_interface) (
    WPASupplicant *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_get_interface) (
    WPASupplicant *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_ifname);

  gboolean (*handle_remove_interface) (
    WPASupplicant *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path);

  const gchar * (*get_debug_level) (WPASupplicant *object);

  gboolean  (*get_debug_show_keys) (WPASupplicant *object);

  gboolean  (*get_debug_timestamp) (WPASupplicant *object);

  const gchar *const * (*get_eap_methods) (WPASupplicant *object);

  const gchar *const * (*get_interfaces) (WPASupplicant *object);

  void (*interface_added) (
    WPASupplicant *object,
    const gchar *arg_path,
    GVariant *arg_properties);

  void (*interface_removed) (
    WPASupplicant *object,
    const gchar *arg_path);

  void (*properties_changed) (
    WPASupplicant *object,
    GVariant *arg_properties);

};

GType wpasupplicant_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpasupplicant_interface_info (void);
guint wpasupplicant_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wpasupplicant_complete_create_interface (
    WPASupplicant *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);

void wpasupplicant_complete_remove_interface (
    WPASupplicant *object,
    GDBusMethodInvocation *invocation);

void wpasupplicant_complete_get_interface (
    WPASupplicant *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);



/* D-Bus signal emissions functions: */
void wpasupplicant_emit_interface_added (
    WPASupplicant *object,
    const gchar *arg_path,
    GVariant *arg_properties);

void wpasupplicant_emit_interface_removed (
    WPASupplicant *object,
    const gchar *arg_path);

void wpasupplicant_emit_properties_changed (
    WPASupplicant *object,
    GVariant *arg_properties);



/* D-Bus method calls: */
void wpasupplicant_call_create_interface (
    WPASupplicant *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_call_create_interface_finish (
    WPASupplicant *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_call_create_interface_sync (
    WPASupplicant *proxy,
    GVariant *arg_args,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_call_remove_interface (
    WPASupplicant *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_call_remove_interface_finish (
    WPASupplicant *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_call_remove_interface_sync (
    WPASupplicant *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_call_get_interface (
    WPASupplicant *proxy,
    const gchar *arg_ifname,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_call_get_interface_finish (
    WPASupplicant *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_call_get_interface_sync (
    WPASupplicant *proxy,
    const gchar *arg_ifname,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *wpasupplicant_get_debug_level (WPASupplicant *object);
gchar *wpasupplicant_dup_debug_level (WPASupplicant *object);
void wpasupplicant_set_debug_level (WPASupplicant *object, const gchar *value);

gboolean wpasupplicant_get_debug_timestamp (WPASupplicant *object);
void wpasupplicant_set_debug_timestamp (WPASupplicant *object, gboolean value);

gboolean wpasupplicant_get_debug_show_keys (WPASupplicant *object);
void wpasupplicant_set_debug_show_keys (WPASupplicant *object, gboolean value);

const gchar *const *wpasupplicant_get_interfaces (WPASupplicant *object);
gchar **wpasupplicant_dup_interfaces (WPASupplicant *object);
void wpasupplicant_set_interfaces (WPASupplicant *object, const gchar *const *value);

const gchar *const *wpasupplicant_get_eap_methods (WPASupplicant *object);
gchar **wpasupplicant_dup_eap_methods (WPASupplicant *object);
void wpasupplicant_set_eap_methods (WPASupplicant *object, const gchar *const *value);


/* ---- */

#define TYPE_WPASUPPLICANT_PROXY (wpasupplicant_proxy_get_type ())
#define WPASUPPLICANT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT_PROXY, WPASupplicantProxy))
#define WPASUPPLICANT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WPASUPPLICANT_PROXY, WPASupplicantProxyClass))
#define WPASUPPLICANT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WPASUPPLICANT_PROXY, WPASupplicantProxyClass))
#define IS_WPASUPPLICANT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT_PROXY))
#define IS_WPASUPPLICANT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WPASUPPLICANT_PROXY))

typedef struct _WPASupplicantProxy WPASupplicantProxy;
typedef struct _WPASupplicantProxyClass WPASupplicantProxyClass;
typedef struct _WPASupplicantProxyPrivate WPASupplicantProxyPrivate;

struct _WPASupplicantProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  WPASupplicantProxyPrivate *priv;
};

struct _WPASupplicantProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpasupplicant_proxy_get_type (void) G_GNUC_CONST;

void wpasupplicant_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WPASupplicant *wpasupplicant_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
WPASupplicant *wpasupplicant_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpasupplicant_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WPASupplicant *wpasupplicant_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
WPASupplicant *wpasupplicant_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_WPASUPPLICANT_SKELETON (wpasupplicant_skeleton_get_type ())
#define WPASUPPLICANT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT_SKELETON, WPASupplicantSkeleton))
#define WPASUPPLICANT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WPASUPPLICANT_SKELETON, WPASupplicantSkeletonClass))
#define WPASUPPLICANT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WPASUPPLICANT_SKELETON, WPASupplicantSkeletonClass))
#define IS_WPASUPPLICANT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT_SKELETON))
#define IS_WPASUPPLICANT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WPASUPPLICANT_SKELETON))

typedef struct _WPASupplicantSkeleton WPASupplicantSkeleton;
typedef struct _WPASupplicantSkeletonClass WPASupplicantSkeletonClass;
typedef struct _WPASupplicantSkeletonPrivate WPASupplicantSkeletonPrivate;

struct _WPASupplicantSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WPASupplicantSkeletonPrivate *priv;
};

struct _WPASupplicantSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpasupplicant_skeleton_get_type (void) G_GNUC_CONST;

WPASupplicant *wpasupplicant_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Interface */

#define TYPE_WPASUPPLICANT_INTERFAZE (wpasupplicant_interfaze_get_type ())
#define WPASUPPLICANT_INTERFAZE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT_INTERFAZE, WPASupplicantInterfaze))
#define IS_WPASUPPLICANT_INTERFAZE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT_INTERFAZE))
#define WPASUPPLICANT_INTERFAZE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_WPASUPPLICANT_INTERFAZE, WPASupplicantInterfazeIface))

struct _WPASupplicantInterfaze;
typedef struct _WPASupplicantInterfaze WPASupplicantInterfaze;
typedef struct _WPASupplicantInterfazeIface WPASupplicantInterfazeIface;

struct _WPASupplicantInterfazeIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_add_blob) (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_data);

  gboolean (*handle_add_network) (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_disconnect) (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_flush_bss) (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation,
    guint arg_age);

  gboolean (*handle_get_blob) (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_network_reply) (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path,
    const gchar *arg_field,
    const gchar *arg_value);

  gboolean (*handle_remove_all_networks) (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_blob) (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_remove_network) (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path);

  gboolean (*handle_scan) (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_select_network) (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path);

  guint  (*get_ap_scan) (WPASupplicantInterfaze *object);

  GVariant * (*get_blobs) (WPASupplicantInterfaze *object);

  const gchar * (*get_bridge_ifname) (WPASupplicantInterfaze *object);

  guint  (*get_bssexpire_age) (WPASupplicantInterfaze *object);

  guint  (*get_bssexpire_count) (WPASupplicantInterfaze *object);

  const gchar *const * (*get_bsss) (WPASupplicantInterfaze *object);

  GVariant * (*get_capabilities) (WPASupplicantInterfaze *object);

  const gchar * (*get_country) (WPASupplicantInterfaze *object);

  const gchar * (*get_current_auth_mode) (WPASupplicantInterfaze *object);

  const gchar * (*get_current_bss) (WPASupplicantInterfaze *object);

  const gchar * (*get_current_network) (WPASupplicantInterfaze *object);

  const gchar * (*get_driver) (WPASupplicantInterfaze *object);

  gboolean  (*get_fast_reauth) (WPASupplicantInterfaze *object);

  const gchar * (*get_ifname) (WPASupplicantInterfaze *object);

  const gchar *const * (*get_networks) (WPASupplicantInterfaze *object);

  gboolean  (*get_scanning) (WPASupplicantInterfaze *object);

  const gchar * (*get_state) (WPASupplicantInterfaze *object);

  void (*blob_added) (
    WPASupplicantInterfaze *object,
    const gchar *arg_name);

  void (*blob_removed) (
    WPASupplicantInterfaze *object,
    const gchar *arg_name);

  void (*bssadded) (
    WPASupplicantInterfaze *object,
    const gchar *arg_path,
    GVariant *arg_properties);

  void (*bssremoved) (
    WPASupplicantInterfaze *object,
    const gchar *arg_path);

  void (*certification) (
    WPASupplicantInterfaze *object,
    GVariant *arg_certification);

  void (*network_added) (
    WPASupplicantInterfaze *object,
    const gchar *arg_path,
    GVariant *arg_properties);

  void (*network_removed) (
    WPASupplicantInterfaze *object,
    const gchar *arg_path);

  void (*network_request) (
    WPASupplicantInterfaze *object,
    const gchar *arg_path,
    const gchar *arg_field,
    const gchar *arg_text);

  void (*network_selected) (
    WPASupplicantInterfaze *object,
    const gchar *arg_path);

  void (*properties_changed) (
    WPASupplicantInterfaze *object,
    GVariant *arg_properties);

  void (*scan_done) (
    WPASupplicantInterfaze *object,
    gboolean arg_success);

};

GType wpasupplicant_interfaze_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpasupplicant_interfaze_interface_info (void);
guint wpasupplicant_interfaze_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wpasupplicant_interfaze_complete_scan (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation);

void wpasupplicant_interfaze_complete_disconnect (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation);

void wpasupplicant_interfaze_complete_add_network (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);

void wpasupplicant_interfaze_complete_remove_network (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation);

void wpasupplicant_interfaze_complete_remove_all_networks (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation);

void wpasupplicant_interfaze_complete_select_network (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation);

void wpasupplicant_interfaze_complete_network_reply (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation);

void wpasupplicant_interfaze_complete_add_blob (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation);

void wpasupplicant_interfaze_complete_get_blob (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation,
    const gchar *data);

void wpasupplicant_interfaze_complete_remove_blob (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation);

void wpasupplicant_interfaze_complete_flush_bss (
    WPASupplicantInterfaze *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void wpasupplicant_interfaze_emit_network_request (
    WPASupplicantInterfaze *object,
    const gchar *arg_path,
    const gchar *arg_field,
    const gchar *arg_text);

void wpasupplicant_interfaze_emit_scan_done (
    WPASupplicantInterfaze *object,
    gboolean arg_success);

void wpasupplicant_interfaze_emit_bssadded (
    WPASupplicantInterfaze *object,
    const gchar *arg_path,
    GVariant *arg_properties);

void wpasupplicant_interfaze_emit_bssremoved (
    WPASupplicantInterfaze *object,
    const gchar *arg_path);

void wpasupplicant_interfaze_emit_blob_added (
    WPASupplicantInterfaze *object,
    const gchar *arg_name);

void wpasupplicant_interfaze_emit_blob_removed (
    WPASupplicantInterfaze *object,
    const gchar *arg_name);

void wpasupplicant_interfaze_emit_network_added (
    WPASupplicantInterfaze *object,
    const gchar *arg_path,
    GVariant *arg_properties);

void wpasupplicant_interfaze_emit_network_removed (
    WPASupplicantInterfaze *object,
    const gchar *arg_path);

void wpasupplicant_interfaze_emit_network_selected (
    WPASupplicantInterfaze *object,
    const gchar *arg_path);

void wpasupplicant_interfaze_emit_properties_changed (
    WPASupplicantInterfaze *object,
    GVariant *arg_properties);

void wpasupplicant_interfaze_emit_certification (
    WPASupplicantInterfaze *object,
    GVariant *arg_certification);



/* D-Bus method calls: */
void wpasupplicant_interfaze_call_scan (
    WPASupplicantInterfaze *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_call_scan_finish (
    WPASupplicantInterfaze *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_call_scan_sync (
    WPASupplicantInterfaze *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_interfaze_call_disconnect (
    WPASupplicantInterfaze *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_call_disconnect_finish (
    WPASupplicantInterfaze *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_call_disconnect_sync (
    WPASupplicantInterfaze *proxy,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_interfaze_call_add_network (
    WPASupplicantInterfaze *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_call_add_network_finish (
    WPASupplicantInterfaze *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_call_add_network_sync (
    WPASupplicantInterfaze *proxy,
    GVariant *arg_args,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_interfaze_call_remove_network (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_call_remove_network_finish (
    WPASupplicantInterfaze *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_call_remove_network_sync (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_interfaze_call_remove_all_networks (
    WPASupplicantInterfaze *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_call_remove_all_networks_finish (
    WPASupplicantInterfaze *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_call_remove_all_networks_sync (
    WPASupplicantInterfaze *proxy,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_interfaze_call_select_network (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_call_select_network_finish (
    WPASupplicantInterfaze *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_call_select_network_sync (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_interfaze_call_network_reply (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_path,
    const gchar *arg_field,
    const gchar *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_call_network_reply_finish (
    WPASupplicantInterfaze *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_call_network_reply_sync (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_path,
    const gchar *arg_field,
    const gchar *arg_value,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_interfaze_call_add_blob (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_name,
    const gchar *arg_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_call_add_blob_finish (
    WPASupplicantInterfaze *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_call_add_blob_sync (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_name,
    const gchar *arg_data,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_interfaze_call_get_blob (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_call_get_blob_finish (
    WPASupplicantInterfaze *proxy,
    gchar **out_data,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_call_get_blob_sync (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_name,
    gchar **out_data,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_interfaze_call_remove_blob (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_call_remove_blob_finish (
    WPASupplicantInterfaze *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_call_remove_blob_sync (
    WPASupplicantInterfaze *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void wpasupplicant_interfaze_call_flush_bss (
    WPASupplicantInterfaze *proxy,
    guint arg_age,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_call_flush_bss_finish (
    WPASupplicantInterfaze *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_call_flush_bss_sync (
    WPASupplicantInterfaze *proxy,
    guint arg_age,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
GVariant *wpasupplicant_interfaze_get_capabilities (WPASupplicantInterfaze *object);
GVariant *wpasupplicant_interfaze_dup_capabilities (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_capabilities (WPASupplicantInterfaze *object, GVariant *value);

const gchar *wpasupplicant_interfaze_get_state (WPASupplicantInterfaze *object);
gchar *wpasupplicant_interfaze_dup_state (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_state (WPASupplicantInterfaze *object, const gchar *value);

gboolean wpasupplicant_interfaze_get_scanning (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_scanning (WPASupplicantInterfaze *object, gboolean value);

guint wpasupplicant_interfaze_get_ap_scan (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_ap_scan (WPASupplicantInterfaze *object, guint value);

guint wpasupplicant_interfaze_get_bssexpire_age (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_bssexpire_age (WPASupplicantInterfaze *object, guint value);

guint wpasupplicant_interfaze_get_bssexpire_count (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_bssexpire_count (WPASupplicantInterfaze *object, guint value);

const gchar *wpasupplicant_interfaze_get_country (WPASupplicantInterfaze *object);
gchar *wpasupplicant_interfaze_dup_country (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_country (WPASupplicantInterfaze *object, const gchar *value);

const gchar *wpasupplicant_interfaze_get_ifname (WPASupplicantInterfaze *object);
gchar *wpasupplicant_interfaze_dup_ifname (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_ifname (WPASupplicantInterfaze *object, const gchar *value);

const gchar *wpasupplicant_interfaze_get_driver (WPASupplicantInterfaze *object);
gchar *wpasupplicant_interfaze_dup_driver (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_driver (WPASupplicantInterfaze *object, const gchar *value);

const gchar *wpasupplicant_interfaze_get_bridge_ifname (WPASupplicantInterfaze *object);
gchar *wpasupplicant_interfaze_dup_bridge_ifname (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_bridge_ifname (WPASupplicantInterfaze *object, const gchar *value);

const gchar *wpasupplicant_interfaze_get_current_bss (WPASupplicantInterfaze *object);
gchar *wpasupplicant_interfaze_dup_current_bss (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_current_bss (WPASupplicantInterfaze *object, const gchar *value);

const gchar *wpasupplicant_interfaze_get_current_network (WPASupplicantInterfaze *object);
gchar *wpasupplicant_interfaze_dup_current_network (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_current_network (WPASupplicantInterfaze *object, const gchar *value);

const gchar *wpasupplicant_interfaze_get_current_auth_mode (WPASupplicantInterfaze *object);
gchar *wpasupplicant_interfaze_dup_current_auth_mode (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_current_auth_mode (WPASupplicantInterfaze *object, const gchar *value);

GVariant *wpasupplicant_interfaze_get_blobs (WPASupplicantInterfaze *object);
GVariant *wpasupplicant_interfaze_dup_blobs (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_blobs (WPASupplicantInterfaze *object, GVariant *value);

const gchar *const *wpasupplicant_interfaze_get_bsss (WPASupplicantInterfaze *object);
gchar **wpasupplicant_interfaze_dup_bsss (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_bsss (WPASupplicantInterfaze *object, const gchar *const *value);

const gchar *const *wpasupplicant_interfaze_get_networks (WPASupplicantInterfaze *object);
gchar **wpasupplicant_interfaze_dup_networks (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_networks (WPASupplicantInterfaze *object, const gchar *const *value);

gboolean wpasupplicant_interfaze_get_fast_reauth (WPASupplicantInterfaze *object);
void wpasupplicant_interfaze_set_fast_reauth (WPASupplicantInterfaze *object, gboolean value);


/* ---- */

#define TYPE_WPASUPPLICANT_INTERFAZE_PROXY (wpasupplicant_interfaze_proxy_get_type ())
#define WPASUPPLICANT_INTERFAZE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT_INTERFAZE_PROXY, WPASupplicantInterfazeProxy))
#define WPASUPPLICANT_INTERFAZE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WPASUPPLICANT_INTERFAZE_PROXY, WPASupplicantInterfazeProxyClass))
#define WPASUPPLICANT_INTERFAZE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WPASUPPLICANT_INTERFAZE_PROXY, WPASupplicantInterfazeProxyClass))
#define IS_WPASUPPLICANT_INTERFAZE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT_INTERFAZE_PROXY))
#define IS_WPASUPPLICANT_INTERFAZE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WPASUPPLICANT_INTERFAZE_PROXY))

typedef struct _WPASupplicantInterfazeProxy WPASupplicantInterfazeProxy;
typedef struct _WPASupplicantInterfazeProxyClass WPASupplicantInterfazeProxyClass;
typedef struct _WPASupplicantInterfazeProxyPrivate WPASupplicantInterfazeProxyPrivate;

struct _WPASupplicantInterfazeProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  WPASupplicantInterfazeProxyPrivate *priv;
};

struct _WPASupplicantInterfazeProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpasupplicant_interfaze_proxy_get_type (void) G_GNUC_CONST;

void wpasupplicant_interfaze_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WPASupplicantInterfaze *wpasupplicant_interfaze_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
WPASupplicantInterfaze *wpasupplicant_interfaze_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpasupplicant_interfaze_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WPASupplicantInterfaze *wpasupplicant_interfaze_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
WPASupplicantInterfaze *wpasupplicant_interfaze_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_WPASUPPLICANT_INTERFAZE_SKELETON (wpasupplicant_interfaze_skeleton_get_type ())
#define WPASUPPLICANT_INTERFAZE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT_INTERFAZE_SKELETON, WPASupplicantInterfazeSkeleton))
#define WPASUPPLICANT_INTERFAZE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WPASUPPLICANT_INTERFAZE_SKELETON, WPASupplicantInterfazeSkeletonClass))
#define WPASUPPLICANT_INTERFAZE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WPASUPPLICANT_INTERFAZE_SKELETON, WPASupplicantInterfazeSkeletonClass))
#define IS_WPASUPPLICANT_INTERFAZE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT_INTERFAZE_SKELETON))
#define IS_WPASUPPLICANT_INTERFAZE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WPASUPPLICANT_INTERFAZE_SKELETON))

typedef struct _WPASupplicantInterfazeSkeleton WPASupplicantInterfazeSkeleton;
typedef struct _WPASupplicantInterfazeSkeletonClass WPASupplicantInterfazeSkeletonClass;
typedef struct _WPASupplicantInterfazeSkeletonPrivate WPASupplicantInterfazeSkeletonPrivate;

struct _WPASupplicantInterfazeSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WPASupplicantInterfazeSkeletonPrivate *priv;
};

struct _WPASupplicantInterfazeSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpasupplicant_interfaze_skeleton_get_type (void) G_GNUC_CONST;

WPASupplicantInterfaze *wpasupplicant_interfaze_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Interface.WPS */

#define TYPE_WPASUPPLICANT_INTERFAZE_WPS (wpasupplicant_interfaze_wps_get_type ())
#define WPASUPPLICANT_INTERFAZE_WPS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT_INTERFAZE_WPS, WPASupplicantInterfazeWPS))
#define IS_WPASUPPLICANT_INTERFAZE_WPS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT_INTERFAZE_WPS))
#define WPASUPPLICANT_INTERFAZE_WPS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_WPASUPPLICANT_INTERFAZE_WPS, WPASupplicantInterfazeWPSIface))

struct _WPASupplicantInterfazeWPS;
typedef struct _WPASupplicantInterfazeWPS WPASupplicantInterfazeWPS;
typedef struct _WPASupplicantInterfazeWPSIface WPASupplicantInterfazeWPSIface;

struct _WPASupplicantInterfazeWPSIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_start) (
    WPASupplicantInterfazeWPS *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean  (*get_process_credentials) (WPASupplicantInterfazeWPS *object);

  void (*credentials) (
    WPASupplicantInterfazeWPS *object,
    GVariant *arg_credentials);

  void (*event) (
    WPASupplicantInterfazeWPS *object,
    const gchar *arg_name,
    GVariant *arg_args);

  void (*properties_changed) (
    WPASupplicantInterfazeWPS *object,
    GVariant *arg_properties);

};

GType wpasupplicant_interfaze_wps_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpasupplicant_interfaze_wps_interface_info (void);
guint wpasupplicant_interfaze_wps_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wpasupplicant_interfaze_wps_complete_start (
    WPASupplicantInterfazeWPS *object,
    GDBusMethodInvocation *invocation,
    GVariant *output);



/* D-Bus signal emissions functions: */
void wpasupplicant_interfaze_wps_emit_event (
    WPASupplicantInterfazeWPS *object,
    const gchar *arg_name,
    GVariant *arg_args);

void wpasupplicant_interfaze_wps_emit_credentials (
    WPASupplicantInterfazeWPS *object,
    GVariant *arg_credentials);

void wpasupplicant_interfaze_wps_emit_properties_changed (
    WPASupplicantInterfazeWPS *object,
    GVariant *arg_properties);



/* D-Bus method calls: */
void wpasupplicant_interfaze_wps_call_start (
    WPASupplicantInterfazeWPS *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpasupplicant_interfaze_wps_call_start_finish (
    WPASupplicantInterfazeWPS *proxy,
    GVariant **out_output,
    GAsyncResult *res,
    GError **error);

gboolean wpasupplicant_interfaze_wps_call_start_sync (
    WPASupplicantInterfazeWPS *proxy,
    GVariant *arg_args,
    GVariant **out_output,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean wpasupplicant_interfaze_wps_get_process_credentials (WPASupplicantInterfazeWPS *object);
void wpasupplicant_interfaze_wps_set_process_credentials (WPASupplicantInterfazeWPS *object, gboolean value);


/* ---- */

#define TYPE_WPASUPPLICANT_INTERFAZE_WPS_PROXY (wpasupplicant_interfaze_wps_proxy_get_type ())
#define WPASUPPLICANT_INTERFAZE_WPS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT_INTERFAZE_WPS_PROXY, WPASupplicantInterfazeWPSProxy))
#define WPASUPPLICANT_INTERFAZE_WPS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WPASUPPLICANT_INTERFAZE_WPS_PROXY, WPASupplicantInterfazeWPSProxyClass))
#define WPASUPPLICANT_INTERFAZE_WPS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WPASUPPLICANT_INTERFAZE_WPS_PROXY, WPASupplicantInterfazeWPSProxyClass))
#define IS_WPASUPPLICANT_INTERFAZE_WPS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT_INTERFAZE_WPS_PROXY))
#define IS_WPASUPPLICANT_INTERFAZE_WPS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WPASUPPLICANT_INTERFAZE_WPS_PROXY))

typedef struct _WPASupplicantInterfazeWPSProxy WPASupplicantInterfazeWPSProxy;
typedef struct _WPASupplicantInterfazeWPSProxyClass WPASupplicantInterfazeWPSProxyClass;
typedef struct _WPASupplicantInterfazeWPSProxyPrivate WPASupplicantInterfazeWPSProxyPrivate;

struct _WPASupplicantInterfazeWPSProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  WPASupplicantInterfazeWPSProxyPrivate *priv;
};

struct _WPASupplicantInterfazeWPSProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpasupplicant_interfaze_wps_proxy_get_type (void) G_GNUC_CONST;

void wpasupplicant_interfaze_wps_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WPASupplicantInterfazeWPS *wpasupplicant_interfaze_wps_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
WPASupplicantInterfazeWPS *wpasupplicant_interfaze_wps_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpasupplicant_interfaze_wps_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WPASupplicantInterfazeWPS *wpasupplicant_interfaze_wps_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
WPASupplicantInterfazeWPS *wpasupplicant_interfaze_wps_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_WPASUPPLICANT_INTERFAZE_WPS_SKELETON (wpasupplicant_interfaze_wps_skeleton_get_type ())
#define WPASUPPLICANT_INTERFAZE_WPS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT_INTERFAZE_WPS_SKELETON, WPASupplicantInterfazeWPSSkeleton))
#define WPASUPPLICANT_INTERFAZE_WPS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WPASUPPLICANT_INTERFAZE_WPS_SKELETON, WPASupplicantInterfazeWPSSkeletonClass))
#define WPASUPPLICANT_INTERFAZE_WPS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WPASUPPLICANT_INTERFAZE_WPS_SKELETON, WPASupplicantInterfazeWPSSkeletonClass))
#define IS_WPASUPPLICANT_INTERFAZE_WPS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT_INTERFAZE_WPS_SKELETON))
#define IS_WPASUPPLICANT_INTERFAZE_WPS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WPASUPPLICANT_INTERFAZE_WPS_SKELETON))

typedef struct _WPASupplicantInterfazeWPSSkeleton WPASupplicantInterfazeWPSSkeleton;
typedef struct _WPASupplicantInterfazeWPSSkeletonClass WPASupplicantInterfazeWPSSkeletonClass;
typedef struct _WPASupplicantInterfazeWPSSkeletonPrivate WPASupplicantInterfazeWPSSkeletonPrivate;

struct _WPASupplicantInterfazeWPSSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WPASupplicantInterfazeWPSSkeletonPrivate *priv;
};

struct _WPASupplicantInterfazeWPSSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpasupplicant_interfaze_wps_skeleton_get_type (void) G_GNUC_CONST;

WPASupplicantInterfazeWPS *wpasupplicant_interfaze_wps_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Network */

#define TYPE_WPASUPPLICANT_NETWORK (wpasupplicant_network_get_type ())
#define WPASUPPLICANT_NETWORK(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT_NETWORK, WPASupplicantNetwork))
#define IS_WPASUPPLICANT_NETWORK(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT_NETWORK))
#define WPASUPPLICANT_NETWORK_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_WPASUPPLICANT_NETWORK, WPASupplicantNetworkIface))

struct _WPASupplicantNetwork;
typedef struct _WPASupplicantNetwork WPASupplicantNetwork;
typedef struct _WPASupplicantNetworkIface WPASupplicantNetworkIface;

struct _WPASupplicantNetworkIface
{
  GTypeInterface parent_iface;


  gboolean  (*get_enabled) (WPASupplicantNetwork *object);

  GVariant * (*get_properties) (WPASupplicantNetwork *object);

  void (*properties_changed) (
    WPASupplicantNetwork *object,
    GVariant *arg_properties);

};

GType wpasupplicant_network_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpasupplicant_network_interface_info (void);
guint wpasupplicant_network_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void wpasupplicant_network_emit_properties_changed (
    WPASupplicantNetwork *object,
    GVariant *arg_properties);



/* D-Bus property accessors: */
GVariant *wpasupplicant_network_get_properties (WPASupplicantNetwork *object);
GVariant *wpasupplicant_network_dup_properties (WPASupplicantNetwork *object);
void wpasupplicant_network_set_properties (WPASupplicantNetwork *object, GVariant *value);

gboolean wpasupplicant_network_get_enabled (WPASupplicantNetwork *object);
void wpasupplicant_network_set_enabled (WPASupplicantNetwork *object, gboolean value);


/* ---- */

#define TYPE_WPASUPPLICANT_NETWORK_PROXY (wpasupplicant_network_proxy_get_type ())
#define WPASUPPLICANT_NETWORK_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT_NETWORK_PROXY, WPASupplicantNetworkProxy))
#define WPASUPPLICANT_NETWORK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WPASUPPLICANT_NETWORK_PROXY, WPASupplicantNetworkProxyClass))
#define WPASUPPLICANT_NETWORK_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WPASUPPLICANT_NETWORK_PROXY, WPASupplicantNetworkProxyClass))
#define IS_WPASUPPLICANT_NETWORK_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT_NETWORK_PROXY))
#define IS_WPASUPPLICANT_NETWORK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WPASUPPLICANT_NETWORK_PROXY))

typedef struct _WPASupplicantNetworkProxy WPASupplicantNetworkProxy;
typedef struct _WPASupplicantNetworkProxyClass WPASupplicantNetworkProxyClass;
typedef struct _WPASupplicantNetworkProxyPrivate WPASupplicantNetworkProxyPrivate;

struct _WPASupplicantNetworkProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  WPASupplicantNetworkProxyPrivate *priv;
};

struct _WPASupplicantNetworkProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpasupplicant_network_proxy_get_type (void) G_GNUC_CONST;

void wpasupplicant_network_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WPASupplicantNetwork *wpasupplicant_network_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
WPASupplicantNetwork *wpasupplicant_network_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpasupplicant_network_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
WPASupplicantNetwork *wpasupplicant_network_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
WPASupplicantNetwork *wpasupplicant_network_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_WPASUPPLICANT_NETWORK_SKELETON (wpasupplicant_network_skeleton_get_type ())
#define WPASUPPLICANT_NETWORK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_WPASUPPLICANT_NETWORK_SKELETON, WPASupplicantNetworkSkeleton))
#define WPASUPPLICANT_NETWORK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_WPASUPPLICANT_NETWORK_SKELETON, WPASupplicantNetworkSkeletonClass))
#define WPASUPPLICANT_NETWORK_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_WPASUPPLICANT_NETWORK_SKELETON, WPASupplicantNetworkSkeletonClass))
#define IS_WPASUPPLICANT_NETWORK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_WPASUPPLICANT_NETWORK_SKELETON))
#define IS_WPASUPPLICANT_NETWORK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_WPASUPPLICANT_NETWORK_SKELETON))

typedef struct _WPASupplicantNetworkSkeleton WPASupplicantNetworkSkeleton;
typedef struct _WPASupplicantNetworkSkeletonClass WPASupplicantNetworkSkeletonClass;
typedef struct _WPASupplicantNetworkSkeletonPrivate WPASupplicantNetworkSkeletonPrivate;

struct _WPASupplicantNetworkSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WPASupplicantNetworkSkeletonPrivate *priv;
};

struct _WPASupplicantNetworkSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpasupplicant_network_skeleton_get_type (void) G_GNUC_CONST;

WPASupplicantNetwork *wpasupplicant_network_skeleton_new (void);


G_END_DECLS

#endif /* __WIFI_CONNECT_DBUS_GEN_H__ */
