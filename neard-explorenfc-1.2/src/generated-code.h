/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SRC_GENERATED_CODE_H__
#define __SRC_GENERATED_CODE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.neard.Adapter */

#define NEARD_TYPE_ADAPTER (neard_adapter_get_type ())
#define NEARD_ADAPTER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_ADAPTER, NeardAdapter))
#define NEARD_IS_ADAPTER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_ADAPTER))
#define NEARD_ADAPTER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NEARD_TYPE_ADAPTER, NeardAdapterIface))

struct _NeardAdapter;
typedef struct _NeardAdapter NeardAdapter;
typedef struct _NeardAdapterIface NeardAdapterIface;

struct _NeardAdapterIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_start_poll_loop) (
    NeardAdapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_stop_poll_loop) (
    NeardAdapter *object,
    GDBusMethodInvocation *invocation);

  const gchar *const * (*get_devices) (NeardAdapter *object);

  const gchar * (*get_mode) (NeardAdapter *object);

  const gchar * (*get_name) (NeardAdapter *object);

  gboolean  (*get_polling) (NeardAdapter *object);

  gboolean  (*get_powered) (NeardAdapter *object);

  const gchar *const * (*get_protocols) (NeardAdapter *object);

  const gchar *const * (*get_tags) (NeardAdapter *object);

  void (*tag_found) (
    NeardAdapter *object,
    const gchar *arg_address);

  void (*tag_lost) (
    NeardAdapter *object,
    const gchar *arg_address);

};

GType neard_adapter_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *neard_adapter_interface_info (void);
guint neard_adapter_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void neard_adapter_complete_start_poll_loop (
    NeardAdapter *object,
    GDBusMethodInvocation *invocation);

void neard_adapter_complete_stop_poll_loop (
    NeardAdapter *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void neard_adapter_emit_tag_found (
    NeardAdapter *object,
    const gchar *arg_address);

void neard_adapter_emit_tag_lost (
    NeardAdapter *object,
    const gchar *arg_address);



/* D-Bus method calls: */
void neard_adapter_call_start_poll_loop (
    NeardAdapter *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_adapter_call_start_poll_loop_finish (
    NeardAdapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_adapter_call_start_poll_loop_sync (
    NeardAdapter *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void neard_adapter_call_stop_poll_loop (
    NeardAdapter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_adapter_call_stop_poll_loop_finish (
    NeardAdapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_adapter_call_stop_poll_loop_sync (
    NeardAdapter *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *neard_adapter_get_name (NeardAdapter *object);
gchar *neard_adapter_dup_name (NeardAdapter *object);
void neard_adapter_set_name (NeardAdapter *object, const gchar *value);

const gchar *neard_adapter_get_mode (NeardAdapter *object);
gchar *neard_adapter_dup_mode (NeardAdapter *object);
void neard_adapter_set_mode (NeardAdapter *object, const gchar *value);

gboolean neard_adapter_get_powered (NeardAdapter *object);
void neard_adapter_set_powered (NeardAdapter *object, gboolean value);

gboolean neard_adapter_get_polling (NeardAdapter *object);
void neard_adapter_set_polling (NeardAdapter *object, gboolean value);

const gchar *const *neard_adapter_get_protocols (NeardAdapter *object);
gchar **neard_adapter_dup_protocols (NeardAdapter *object);
void neard_adapter_set_protocols (NeardAdapter *object, const gchar *const *value);

const gchar *const *neard_adapter_get_tags (NeardAdapter *object);
gchar **neard_adapter_dup_tags (NeardAdapter *object);
void neard_adapter_set_tags (NeardAdapter *object, const gchar *const *value);

const gchar *const *neard_adapter_get_devices (NeardAdapter *object);
gchar **neard_adapter_dup_devices (NeardAdapter *object);
void neard_adapter_set_devices (NeardAdapter *object, const gchar *const *value);


/* ---- */

#define NEARD_TYPE_ADAPTER_PROXY (neard_adapter_proxy_get_type ())
#define NEARD_ADAPTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_ADAPTER_PROXY, NeardAdapterProxy))
#define NEARD_ADAPTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_ADAPTER_PROXY, NeardAdapterProxyClass))
#define NEARD_ADAPTER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_ADAPTER_PROXY, NeardAdapterProxyClass))
#define NEARD_IS_ADAPTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_ADAPTER_PROXY))
#define NEARD_IS_ADAPTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_ADAPTER_PROXY))

typedef struct _NeardAdapterProxy NeardAdapterProxy;
typedef struct _NeardAdapterProxyClass NeardAdapterProxyClass;
typedef struct _NeardAdapterProxyPrivate NeardAdapterProxyPrivate;

struct _NeardAdapterProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NeardAdapterProxyPrivate *priv;
};

struct _NeardAdapterProxyClass
{
  GDBusProxyClass parent_class;
};

GType neard_adapter_proxy_get_type (void) G_GNUC_CONST;

void neard_adapter_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardAdapter *neard_adapter_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NeardAdapter *neard_adapter_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void neard_adapter_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardAdapter *neard_adapter_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NeardAdapter *neard_adapter_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NEARD_TYPE_ADAPTER_SKELETON (neard_adapter_skeleton_get_type ())
#define NEARD_ADAPTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_ADAPTER_SKELETON, NeardAdapterSkeleton))
#define NEARD_ADAPTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_ADAPTER_SKELETON, NeardAdapterSkeletonClass))
#define NEARD_ADAPTER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_ADAPTER_SKELETON, NeardAdapterSkeletonClass))
#define NEARD_IS_ADAPTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_ADAPTER_SKELETON))
#define NEARD_IS_ADAPTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_ADAPTER_SKELETON))

typedef struct _NeardAdapterSkeleton NeardAdapterSkeleton;
typedef struct _NeardAdapterSkeletonClass NeardAdapterSkeletonClass;
typedef struct _NeardAdapterSkeletonPrivate NeardAdapterSkeletonPrivate;

struct _NeardAdapterSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NeardAdapterSkeletonPrivate *priv;
};

struct _NeardAdapterSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType neard_adapter_skeleton_get_type (void) G_GNUC_CONST;

NeardAdapter *neard_adapter_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.neard.NDEFAgent */

#define NEARD_TYPE_NDEFAGENT (neard_ndefagent_get_type ())
#define NEARD_NDEFAGENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_NDEFAGENT, NeardNDEFAgent))
#define NEARD_IS_NDEFAGENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_NDEFAGENT))
#define NEARD_NDEFAGENT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NEARD_TYPE_NDEFAGENT, NeardNDEFAgentIface))

struct _NeardNDEFAgent;
typedef struct _NeardNDEFAgent NeardNDEFAgent;
typedef struct _NeardNDEFAgentIface NeardNDEFAgentIface;

struct _NeardNDEFAgentIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_ndef) (
    NeardNDEFAgent *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_values);

  gboolean (*handle_release) (
    NeardNDEFAgent *object,
    GDBusMethodInvocation *invocation);

};

GType neard_ndefagent_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *neard_ndefagent_interface_info (void);
guint neard_ndefagent_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void neard_ndefagent_complete_get_ndef (
    NeardNDEFAgent *object,
    GDBusMethodInvocation *invocation);

void neard_ndefagent_complete_release (
    NeardNDEFAgent *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void neard_ndefagent_call_get_ndef (
    NeardNDEFAgent *proxy,
    GVariant *arg_values,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_ndefagent_call_get_ndef_finish (
    NeardNDEFAgent *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_ndefagent_call_get_ndef_sync (
    NeardNDEFAgent *proxy,
    GVariant *arg_values,
    GCancellable *cancellable,
    GError **error);

void neard_ndefagent_call_release (
    NeardNDEFAgent *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_ndefagent_call_release_finish (
    NeardNDEFAgent *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_ndefagent_call_release_sync (
    NeardNDEFAgent *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define NEARD_TYPE_NDEFAGENT_PROXY (neard_ndefagent_proxy_get_type ())
#define NEARD_NDEFAGENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_NDEFAGENT_PROXY, NeardNDEFAgentProxy))
#define NEARD_NDEFAGENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_NDEFAGENT_PROXY, NeardNDEFAgentProxyClass))
#define NEARD_NDEFAGENT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_NDEFAGENT_PROXY, NeardNDEFAgentProxyClass))
#define NEARD_IS_NDEFAGENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_NDEFAGENT_PROXY))
#define NEARD_IS_NDEFAGENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_NDEFAGENT_PROXY))

typedef struct _NeardNDEFAgentProxy NeardNDEFAgentProxy;
typedef struct _NeardNDEFAgentProxyClass NeardNDEFAgentProxyClass;
typedef struct _NeardNDEFAgentProxyPrivate NeardNDEFAgentProxyPrivate;

struct _NeardNDEFAgentProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NeardNDEFAgentProxyPrivate *priv;
};

struct _NeardNDEFAgentProxyClass
{
  GDBusProxyClass parent_class;
};

GType neard_ndefagent_proxy_get_type (void) G_GNUC_CONST;

void neard_ndefagent_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardNDEFAgent *neard_ndefagent_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NeardNDEFAgent *neard_ndefagent_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void neard_ndefagent_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardNDEFAgent *neard_ndefagent_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NeardNDEFAgent *neard_ndefagent_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NEARD_TYPE_NDEFAGENT_SKELETON (neard_ndefagent_skeleton_get_type ())
#define NEARD_NDEFAGENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_NDEFAGENT_SKELETON, NeardNDEFAgentSkeleton))
#define NEARD_NDEFAGENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_NDEFAGENT_SKELETON, NeardNDEFAgentSkeletonClass))
#define NEARD_NDEFAGENT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_NDEFAGENT_SKELETON, NeardNDEFAgentSkeletonClass))
#define NEARD_IS_NDEFAGENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_NDEFAGENT_SKELETON))
#define NEARD_IS_NDEFAGENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_NDEFAGENT_SKELETON))

typedef struct _NeardNDEFAgentSkeleton NeardNDEFAgentSkeleton;
typedef struct _NeardNDEFAgentSkeletonClass NeardNDEFAgentSkeletonClass;
typedef struct _NeardNDEFAgentSkeletonPrivate NeardNDEFAgentSkeletonPrivate;

struct _NeardNDEFAgentSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NeardNDEFAgentSkeletonPrivate *priv;
};

struct _NeardNDEFAgentSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType neard_ndefagent_skeleton_get_type (void) G_GNUC_CONST;

NeardNDEFAgent *neard_ndefagent_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.neard.HandoverAgent */

#define NEARD_TYPE_HANDOVER_AGENT (neard_handover_agent_get_type ())
#define NEARD_HANDOVER_AGENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_HANDOVER_AGENT, NeardHandoverAgent))
#define NEARD_IS_HANDOVER_AGENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_HANDOVER_AGENT))
#define NEARD_HANDOVER_AGENT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NEARD_TYPE_HANDOVER_AGENT, NeardHandoverAgentIface))

struct _NeardHandoverAgent;
typedef struct _NeardHandoverAgent NeardHandoverAgent;
typedef struct _NeardHandoverAgentIface NeardHandoverAgentIface;

struct _NeardHandoverAgentIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_push_oob) (
    NeardHandoverAgent *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_values);

  gboolean (*handle_release) (
    NeardHandoverAgent *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_request_oob) (
    NeardHandoverAgent *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_values);

};

GType neard_handover_agent_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *neard_handover_agent_interface_info (void);
guint neard_handover_agent_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void neard_handover_agent_complete_request_oob (
    NeardHandoverAgent *object,
    GDBusMethodInvocation *invocation,
    GVariant *result);

void neard_handover_agent_complete_push_oob (
    NeardHandoverAgent *object,
    GDBusMethodInvocation *invocation);

void neard_handover_agent_complete_release (
    NeardHandoverAgent *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void neard_handover_agent_call_request_oob (
    NeardHandoverAgent *proxy,
    GVariant *arg_values,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_handover_agent_call_request_oob_finish (
    NeardHandoverAgent *proxy,
    GVariant **out_result,
    GAsyncResult *res,
    GError **error);

gboolean neard_handover_agent_call_request_oob_sync (
    NeardHandoverAgent *proxy,
    GVariant *arg_values,
    GVariant **out_result,
    GCancellable *cancellable,
    GError **error);

void neard_handover_agent_call_push_oob (
    NeardHandoverAgent *proxy,
    GVariant *arg_values,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_handover_agent_call_push_oob_finish (
    NeardHandoverAgent *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_handover_agent_call_push_oob_sync (
    NeardHandoverAgent *proxy,
    GVariant *arg_values,
    GCancellable *cancellable,
    GError **error);

void neard_handover_agent_call_release (
    NeardHandoverAgent *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_handover_agent_call_release_finish (
    NeardHandoverAgent *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_handover_agent_call_release_sync (
    NeardHandoverAgent *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define NEARD_TYPE_HANDOVER_AGENT_PROXY (neard_handover_agent_proxy_get_type ())
#define NEARD_HANDOVER_AGENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_HANDOVER_AGENT_PROXY, NeardHandoverAgentProxy))
#define NEARD_HANDOVER_AGENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_HANDOVER_AGENT_PROXY, NeardHandoverAgentProxyClass))
#define NEARD_HANDOVER_AGENT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_HANDOVER_AGENT_PROXY, NeardHandoverAgentProxyClass))
#define NEARD_IS_HANDOVER_AGENT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_HANDOVER_AGENT_PROXY))
#define NEARD_IS_HANDOVER_AGENT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_HANDOVER_AGENT_PROXY))

typedef struct _NeardHandoverAgentProxy NeardHandoverAgentProxy;
typedef struct _NeardHandoverAgentProxyClass NeardHandoverAgentProxyClass;
typedef struct _NeardHandoverAgentProxyPrivate NeardHandoverAgentProxyPrivate;

struct _NeardHandoverAgentProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NeardHandoverAgentProxyPrivate *priv;
};

struct _NeardHandoverAgentProxyClass
{
  GDBusProxyClass parent_class;
};

GType neard_handover_agent_proxy_get_type (void) G_GNUC_CONST;

void neard_handover_agent_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardHandoverAgent *neard_handover_agent_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NeardHandoverAgent *neard_handover_agent_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void neard_handover_agent_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardHandoverAgent *neard_handover_agent_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NeardHandoverAgent *neard_handover_agent_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NEARD_TYPE_HANDOVER_AGENT_SKELETON (neard_handover_agent_skeleton_get_type ())
#define NEARD_HANDOVER_AGENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_HANDOVER_AGENT_SKELETON, NeardHandoverAgentSkeleton))
#define NEARD_HANDOVER_AGENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_HANDOVER_AGENT_SKELETON, NeardHandoverAgentSkeletonClass))
#define NEARD_HANDOVER_AGENT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_HANDOVER_AGENT_SKELETON, NeardHandoverAgentSkeletonClass))
#define NEARD_IS_HANDOVER_AGENT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_HANDOVER_AGENT_SKELETON))
#define NEARD_IS_HANDOVER_AGENT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_HANDOVER_AGENT_SKELETON))

typedef struct _NeardHandoverAgentSkeleton NeardHandoverAgentSkeleton;
typedef struct _NeardHandoverAgentSkeletonClass NeardHandoverAgentSkeletonClass;
typedef struct _NeardHandoverAgentSkeletonPrivate NeardHandoverAgentSkeletonPrivate;

struct _NeardHandoverAgentSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NeardHandoverAgentSkeletonPrivate *priv;
};

struct _NeardHandoverAgentSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType neard_handover_agent_skeleton_get_type (void) G_GNUC_CONST;

NeardHandoverAgent *neard_handover_agent_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.neard.Manager */

#define NEARD_TYPE_MANAGER (neard_manager_get_type ())
#define NEARD_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_MANAGER, NeardManager))
#define NEARD_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_MANAGER))
#define NEARD_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NEARD_TYPE_MANAGER, NeardManagerIface))

struct _NeardManager;
typedef struct _NeardManager NeardManager;
typedef struct _NeardManagerIface NeardManagerIface;

struct _NeardManagerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_register_handover_agent) (
    NeardManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path,
    const gchar *arg_type);

  gboolean (*handle_register_ndefagent) (
    NeardManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path,
    const gchar *arg_type);

  gboolean (*handle_unregister_handover_agent) (
    NeardManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path,
    const gchar *arg_type);

  gboolean (*handle_unregister_ndefagent) (
    NeardManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path,
    const gchar *arg_type);

  const gchar *const * (*get_adapters) (NeardManager *object);

  void (*adapter_added) (
    NeardManager *object,
    const gchar *arg_adapter);

  void (*adapter_removed) (
    NeardManager *object,
    const gchar *arg_adapter);

  void (*property_changed) (
    NeardManager *object,
    const gchar *arg_name,
    GVariant *arg_value);

};

GType neard_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *neard_manager_interface_info (void);
guint neard_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void neard_manager_complete_register_handover_agent (
    NeardManager *object,
    GDBusMethodInvocation *invocation);

void neard_manager_complete_unregister_handover_agent (
    NeardManager *object,
    GDBusMethodInvocation *invocation);

void neard_manager_complete_register_ndefagent (
    NeardManager *object,
    GDBusMethodInvocation *invocation);

void neard_manager_complete_unregister_ndefagent (
    NeardManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void neard_manager_emit_property_changed (
    NeardManager *object,
    const gchar *arg_name,
    GVariant *arg_value);

void neard_manager_emit_adapter_added (
    NeardManager *object,
    const gchar *arg_adapter);

void neard_manager_emit_adapter_removed (
    NeardManager *object,
    const gchar *arg_adapter);



/* D-Bus method calls: */
void neard_manager_call_register_handover_agent (
    NeardManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_manager_call_register_handover_agent_finish (
    NeardManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_manager_call_register_handover_agent_sync (
    NeardManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GError **error);

void neard_manager_call_unregister_handover_agent (
    NeardManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_manager_call_unregister_handover_agent_finish (
    NeardManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_manager_call_unregister_handover_agent_sync (
    NeardManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GError **error);

void neard_manager_call_register_ndefagent (
    NeardManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_manager_call_register_ndefagent_finish (
    NeardManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_manager_call_register_ndefagent_sync (
    NeardManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GError **error);

void neard_manager_call_unregister_ndefagent (
    NeardManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_manager_call_unregister_ndefagent_finish (
    NeardManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_manager_call_unregister_ndefagent_sync (
    NeardManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *neard_manager_get_adapters (NeardManager *object);
gchar **neard_manager_dup_adapters (NeardManager *object);
void neard_manager_set_adapters (NeardManager *object, const gchar *const *value);


/* ---- */

#define NEARD_TYPE_MANAGER_PROXY (neard_manager_proxy_get_type ())
#define NEARD_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_MANAGER_PROXY, NeardManagerProxy))
#define NEARD_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_MANAGER_PROXY, NeardManagerProxyClass))
#define NEARD_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_MANAGER_PROXY, NeardManagerProxyClass))
#define NEARD_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_MANAGER_PROXY))
#define NEARD_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_MANAGER_PROXY))

typedef struct _NeardManagerProxy NeardManagerProxy;
typedef struct _NeardManagerProxyClass NeardManagerProxyClass;
typedef struct _NeardManagerProxyPrivate NeardManagerProxyPrivate;

struct _NeardManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NeardManagerProxyPrivate *priv;
};

struct _NeardManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType neard_manager_proxy_get_type (void) G_GNUC_CONST;

void neard_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardManager *neard_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NeardManager *neard_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void neard_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardManager *neard_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NeardManager *neard_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NEARD_TYPE_MANAGER_SKELETON (neard_manager_skeleton_get_type ())
#define NEARD_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_MANAGER_SKELETON, NeardManagerSkeleton))
#define NEARD_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_MANAGER_SKELETON, NeardManagerSkeletonClass))
#define NEARD_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_MANAGER_SKELETON, NeardManagerSkeletonClass))
#define NEARD_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_MANAGER_SKELETON))
#define NEARD_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_MANAGER_SKELETON))

typedef struct _NeardManagerSkeleton NeardManagerSkeleton;
typedef struct _NeardManagerSkeletonClass NeardManagerSkeletonClass;
typedef struct _NeardManagerSkeletonPrivate NeardManagerSkeletonPrivate;

struct _NeardManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NeardManagerSkeletonPrivate *priv;
};

struct _NeardManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType neard_manager_skeleton_get_type (void) G_GNUC_CONST;

NeardManager *neard_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.neard.AgentManager */

#define NEARD_TYPE_AGENT_MANAGER (neard_agent_manager_get_type ())
#define NEARD_AGENT_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_AGENT_MANAGER, NeardAgentManager))
#define NEARD_IS_AGENT_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_AGENT_MANAGER))
#define NEARD_AGENT_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NEARD_TYPE_AGENT_MANAGER, NeardAgentManagerIface))

struct _NeardAgentManager;
typedef struct _NeardAgentManager NeardAgentManager;
typedef struct _NeardAgentManagerIface NeardAgentManagerIface;

struct _NeardAgentManagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_register_handover_agent) (
    NeardAgentManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path,
    const gchar *arg_type);

  gboolean (*handle_register_ndefagent) (
    NeardAgentManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path,
    const gchar *arg_type);

  gboolean (*handle_unregister_handover_agent) (
    NeardAgentManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path,
    const gchar *arg_type);

  gboolean (*handle_unregister_ndefagent) (
    NeardAgentManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path,
    const gchar *arg_type);

};

GType neard_agent_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *neard_agent_manager_interface_info (void);
guint neard_agent_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void neard_agent_manager_complete_register_handover_agent (
    NeardAgentManager *object,
    GDBusMethodInvocation *invocation);

void neard_agent_manager_complete_unregister_handover_agent (
    NeardAgentManager *object,
    GDBusMethodInvocation *invocation);

void neard_agent_manager_complete_register_ndefagent (
    NeardAgentManager *object,
    GDBusMethodInvocation *invocation);

void neard_agent_manager_complete_unregister_ndefagent (
    NeardAgentManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void neard_agent_manager_call_register_handover_agent (
    NeardAgentManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_agent_manager_call_register_handover_agent_finish (
    NeardAgentManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_agent_manager_call_register_handover_agent_sync (
    NeardAgentManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GError **error);

void neard_agent_manager_call_unregister_handover_agent (
    NeardAgentManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_agent_manager_call_unregister_handover_agent_finish (
    NeardAgentManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_agent_manager_call_unregister_handover_agent_sync (
    NeardAgentManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GError **error);

void neard_agent_manager_call_register_ndefagent (
    NeardAgentManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_agent_manager_call_register_ndefagent_finish (
    NeardAgentManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_agent_manager_call_register_ndefagent_sync (
    NeardAgentManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GError **error);

void neard_agent_manager_call_unregister_ndefagent (
    NeardAgentManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_agent_manager_call_unregister_ndefagent_finish (
    NeardAgentManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_agent_manager_call_unregister_ndefagent_sync (
    NeardAgentManager *proxy,
    const gchar *arg_path,
    const gchar *arg_type,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define NEARD_TYPE_AGENT_MANAGER_PROXY (neard_agent_manager_proxy_get_type ())
#define NEARD_AGENT_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_AGENT_MANAGER_PROXY, NeardAgentManagerProxy))
#define NEARD_AGENT_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_AGENT_MANAGER_PROXY, NeardAgentManagerProxyClass))
#define NEARD_AGENT_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_AGENT_MANAGER_PROXY, NeardAgentManagerProxyClass))
#define NEARD_IS_AGENT_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_AGENT_MANAGER_PROXY))
#define NEARD_IS_AGENT_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_AGENT_MANAGER_PROXY))

typedef struct _NeardAgentManagerProxy NeardAgentManagerProxy;
typedef struct _NeardAgentManagerProxyClass NeardAgentManagerProxyClass;
typedef struct _NeardAgentManagerProxyPrivate NeardAgentManagerProxyPrivate;

struct _NeardAgentManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NeardAgentManagerProxyPrivate *priv;
};

struct _NeardAgentManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType neard_agent_manager_proxy_get_type (void) G_GNUC_CONST;

void neard_agent_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardAgentManager *neard_agent_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NeardAgentManager *neard_agent_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void neard_agent_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardAgentManager *neard_agent_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NeardAgentManager *neard_agent_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NEARD_TYPE_AGENT_MANAGER_SKELETON (neard_agent_manager_skeleton_get_type ())
#define NEARD_AGENT_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_AGENT_MANAGER_SKELETON, NeardAgentManagerSkeleton))
#define NEARD_AGENT_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_AGENT_MANAGER_SKELETON, NeardAgentManagerSkeletonClass))
#define NEARD_AGENT_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_AGENT_MANAGER_SKELETON, NeardAgentManagerSkeletonClass))
#define NEARD_IS_AGENT_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_AGENT_MANAGER_SKELETON))
#define NEARD_IS_AGENT_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_AGENT_MANAGER_SKELETON))

typedef struct _NeardAgentManagerSkeleton NeardAgentManagerSkeleton;
typedef struct _NeardAgentManagerSkeletonClass NeardAgentManagerSkeletonClass;
typedef struct _NeardAgentManagerSkeletonPrivate NeardAgentManagerSkeletonPrivate;

struct _NeardAgentManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NeardAgentManagerSkeletonPrivate *priv;
};

struct _NeardAgentManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType neard_agent_manager_skeleton_get_type (void) G_GNUC_CONST;

NeardAgentManager *neard_agent_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.neard.Tag */

#define NEARD_TYPE_TAG (neard_tag_get_type ())
#define NEARD_TAG(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_TAG, NeardTag))
#define NEARD_IS_TAG(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_TAG))
#define NEARD_TAG_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NEARD_TYPE_TAG, NeardTagIface))

struct _NeardTag;
typedef struct _NeardTag NeardTag;
typedef struct _NeardTagIface NeardTagIface;

struct _NeardTagIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_raw_ndef) (
    NeardTag *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_write) (
    NeardTag *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_attributes);

  const gchar * (*get_adapter) (NeardTag *object);

  GVariant * (*get_felica_cid) (NeardTag *object);

  GVariant * (*get_felica_ic) (NeardTag *object);

  GVariant * (*get_felica_manufacturer) (NeardTag *object);

  GVariant * (*get_felica_max_resp_times) (NeardTag *object);

  GVariant * (*get_iso14443a_atqa) (NeardTag *object);

  GVariant * (*get_iso14443a_sak) (NeardTag *object);

  GVariant * (*get_iso14443a_uid) (NeardTag *object);

  const gchar * (*get_name) (NeardTag *object);

  const gchar * (*get_protocol) (NeardTag *object);

  gboolean  (*get_read_only) (NeardTag *object);

  const gchar *const * (*get_records) (NeardTag *object);

  const gchar * (*get_type_) (NeardTag *object);

};

GType neard_tag_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *neard_tag_interface_info (void);
guint neard_tag_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void neard_tag_complete_write (
    NeardTag *object,
    GDBusMethodInvocation *invocation);

void neard_tag_complete_get_raw_ndef (
    NeardTag *object,
    GDBusMethodInvocation *invocation,
    GVariant *NDEF);



/* D-Bus method calls: */
void neard_tag_call_write (
    NeardTag *proxy,
    GVariant *arg_attributes,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_tag_call_write_finish (
    NeardTag *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_tag_call_write_sync (
    NeardTag *proxy,
    GVariant *arg_attributes,
    GCancellable *cancellable,
    GError **error);

void neard_tag_call_get_raw_ndef (
    NeardTag *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_tag_call_get_raw_ndef_finish (
    NeardTag *proxy,
    GVariant **out_NDEF,
    GAsyncResult *res,
    GError **error);

gboolean neard_tag_call_get_raw_ndef_sync (
    NeardTag *proxy,
    GVariant **out_NDEF,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *neard_tag_get_name (NeardTag *object);
gchar *neard_tag_dup_name (NeardTag *object);
void neard_tag_set_name (NeardTag *object, const gchar *value);

const gchar *neard_tag_get_type_ (NeardTag *object);
gchar *neard_tag_dup_type_ (NeardTag *object);
void neard_tag_set_type_ (NeardTag *object, const gchar *value);

const gchar *neard_tag_get_protocol (NeardTag *object);
gchar *neard_tag_dup_protocol (NeardTag *object);
void neard_tag_set_protocol (NeardTag *object, const gchar *value);

gboolean neard_tag_get_read_only (NeardTag *object);
void neard_tag_set_read_only (NeardTag *object, gboolean value);

const gchar *neard_tag_get_adapter (NeardTag *object);
gchar *neard_tag_dup_adapter (NeardTag *object);
void neard_tag_set_adapter (NeardTag *object, const gchar *value);

const gchar *const *neard_tag_get_records (NeardTag *object);
gchar **neard_tag_dup_records (NeardTag *object);
void neard_tag_set_records (NeardTag *object, const gchar *const *value);

GVariant *neard_tag_get_iso14443a_uid (NeardTag *object);
GVariant *neard_tag_dup_iso14443a_uid (NeardTag *object);
void neard_tag_set_iso14443a_uid (NeardTag *object, GVariant *value);

GVariant *neard_tag_get_iso14443a_atqa (NeardTag *object);
GVariant *neard_tag_dup_iso14443a_atqa (NeardTag *object);
void neard_tag_set_iso14443a_atqa (NeardTag *object, GVariant *value);

GVariant *neard_tag_get_iso14443a_sak (NeardTag *object);
GVariant *neard_tag_dup_iso14443a_sak (NeardTag *object);
void neard_tag_set_iso14443a_sak (NeardTag *object, GVariant *value);

GVariant *neard_tag_get_felica_manufacturer (NeardTag *object);
GVariant *neard_tag_dup_felica_manufacturer (NeardTag *object);
void neard_tag_set_felica_manufacturer (NeardTag *object, GVariant *value);

GVariant *neard_tag_get_felica_cid (NeardTag *object);
GVariant *neard_tag_dup_felica_cid (NeardTag *object);
void neard_tag_set_felica_cid (NeardTag *object, GVariant *value);

GVariant *neard_tag_get_felica_ic (NeardTag *object);
GVariant *neard_tag_dup_felica_ic (NeardTag *object);
void neard_tag_set_felica_ic (NeardTag *object, GVariant *value);

GVariant *neard_tag_get_felica_max_resp_times (NeardTag *object);
GVariant *neard_tag_dup_felica_max_resp_times (NeardTag *object);
void neard_tag_set_felica_max_resp_times (NeardTag *object, GVariant *value);


/* ---- */

#define NEARD_TYPE_TAG_PROXY (neard_tag_proxy_get_type ())
#define NEARD_TAG_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_TAG_PROXY, NeardTagProxy))
#define NEARD_TAG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_TAG_PROXY, NeardTagProxyClass))
#define NEARD_TAG_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_TAG_PROXY, NeardTagProxyClass))
#define NEARD_IS_TAG_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_TAG_PROXY))
#define NEARD_IS_TAG_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_TAG_PROXY))

typedef struct _NeardTagProxy NeardTagProxy;
typedef struct _NeardTagProxyClass NeardTagProxyClass;
typedef struct _NeardTagProxyPrivate NeardTagProxyPrivate;

struct _NeardTagProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NeardTagProxyPrivate *priv;
};

struct _NeardTagProxyClass
{
  GDBusProxyClass parent_class;
};

GType neard_tag_proxy_get_type (void) G_GNUC_CONST;

void neard_tag_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardTag *neard_tag_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NeardTag *neard_tag_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void neard_tag_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardTag *neard_tag_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NeardTag *neard_tag_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NEARD_TYPE_TAG_SKELETON (neard_tag_skeleton_get_type ())
#define NEARD_TAG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_TAG_SKELETON, NeardTagSkeleton))
#define NEARD_TAG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_TAG_SKELETON, NeardTagSkeletonClass))
#define NEARD_TAG_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_TAG_SKELETON, NeardTagSkeletonClass))
#define NEARD_IS_TAG_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_TAG_SKELETON))
#define NEARD_IS_TAG_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_TAG_SKELETON))

typedef struct _NeardTagSkeleton NeardTagSkeleton;
typedef struct _NeardTagSkeletonClass NeardTagSkeletonClass;
typedef struct _NeardTagSkeletonPrivate NeardTagSkeletonPrivate;

struct _NeardTagSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NeardTagSkeletonPrivate *priv;
};

struct _NeardTagSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType neard_tag_skeleton_get_type (void) G_GNUC_CONST;

NeardTag *neard_tag_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.neard.Device */

#define NEARD_TYPE_DEVICE (neard_device_get_type ())
#define NEARD_DEVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_DEVICE, NeardDevice))
#define NEARD_IS_DEVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_DEVICE))
#define NEARD_DEVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NEARD_TYPE_DEVICE, NeardDeviceIface))

struct _NeardDevice;
typedef struct _NeardDevice NeardDevice;
typedef struct _NeardDeviceIface NeardDeviceIface;

struct _NeardDeviceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_raw_ndef) (
    NeardDevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_push) (
    NeardDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_attributes);

  const gchar * (*get_adapter) (NeardDevice *object);

  const gchar * (*get_name) (NeardDevice *object);

  const gchar *const * (*get_records) (NeardDevice *object);

};

GType neard_device_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *neard_device_interface_info (void);
guint neard_device_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void neard_device_complete_push (
    NeardDevice *object,
    GDBusMethodInvocation *invocation);

void neard_device_complete_get_raw_ndef (
    NeardDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *NDEF);



/* D-Bus method calls: */
void neard_device_call_push (
    NeardDevice *proxy,
    GVariant *arg_attributes,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_device_call_push_finish (
    NeardDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean neard_device_call_push_sync (
    NeardDevice *proxy,
    GVariant *arg_attributes,
    GCancellable *cancellable,
    GError **error);

void neard_device_call_get_raw_ndef (
    NeardDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean neard_device_call_get_raw_ndef_finish (
    NeardDevice *proxy,
    GVariant **out_NDEF,
    GAsyncResult *res,
    GError **error);

gboolean neard_device_call_get_raw_ndef_sync (
    NeardDevice *proxy,
    GVariant **out_NDEF,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *neard_device_get_name (NeardDevice *object);
gchar *neard_device_dup_name (NeardDevice *object);
void neard_device_set_name (NeardDevice *object, const gchar *value);

const gchar *neard_device_get_adapter (NeardDevice *object);
gchar *neard_device_dup_adapter (NeardDevice *object);
void neard_device_set_adapter (NeardDevice *object, const gchar *value);

const gchar *const *neard_device_get_records (NeardDevice *object);
gchar **neard_device_dup_records (NeardDevice *object);
void neard_device_set_records (NeardDevice *object, const gchar *const *value);


/* ---- */

#define NEARD_TYPE_DEVICE_PROXY (neard_device_proxy_get_type ())
#define NEARD_DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_DEVICE_PROXY, NeardDeviceProxy))
#define NEARD_DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_DEVICE_PROXY, NeardDeviceProxyClass))
#define NEARD_DEVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_DEVICE_PROXY, NeardDeviceProxyClass))
#define NEARD_IS_DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_DEVICE_PROXY))
#define NEARD_IS_DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_DEVICE_PROXY))

typedef struct _NeardDeviceProxy NeardDeviceProxy;
typedef struct _NeardDeviceProxyClass NeardDeviceProxyClass;
typedef struct _NeardDeviceProxyPrivate NeardDeviceProxyPrivate;

struct _NeardDeviceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NeardDeviceProxyPrivate *priv;
};

struct _NeardDeviceProxyClass
{
  GDBusProxyClass parent_class;
};

GType neard_device_proxy_get_type (void) G_GNUC_CONST;

void neard_device_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardDevice *neard_device_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NeardDevice *neard_device_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void neard_device_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardDevice *neard_device_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NeardDevice *neard_device_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NEARD_TYPE_DEVICE_SKELETON (neard_device_skeleton_get_type ())
#define NEARD_DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_DEVICE_SKELETON, NeardDeviceSkeleton))
#define NEARD_DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_DEVICE_SKELETON, NeardDeviceSkeletonClass))
#define NEARD_DEVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_DEVICE_SKELETON, NeardDeviceSkeletonClass))
#define NEARD_IS_DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_DEVICE_SKELETON))
#define NEARD_IS_DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_DEVICE_SKELETON))

typedef struct _NeardDeviceSkeleton NeardDeviceSkeleton;
typedef struct _NeardDeviceSkeletonClass NeardDeviceSkeletonClass;
typedef struct _NeardDeviceSkeletonPrivate NeardDeviceSkeletonPrivate;

struct _NeardDeviceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NeardDeviceSkeletonPrivate *priv;
};

struct _NeardDeviceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType neard_device_skeleton_get_type (void) G_GNUC_CONST;

NeardDevice *neard_device_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.neard.Record */

#define NEARD_TYPE_RECORD (neard_record_get_type ())
#define NEARD_RECORD(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_RECORD, NeardRecord))
#define NEARD_IS_RECORD(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_RECORD))
#define NEARD_RECORD_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NEARD_TYPE_RECORD, NeardRecordIface))

struct _NeardRecord;
typedef struct _NeardRecord NeardRecord;
typedef struct _NeardRecordIface NeardRecordIface;

struct _NeardRecordIface
{
  GTypeInterface parent_iface;

  const gchar * (*get_action) (NeardRecord *object);

  const gchar * (*get_android_package) (NeardRecord *object);

  const gchar * (*get_encoding) (NeardRecord *object);

  const gchar * (*get_language) (NeardRecord *object);

  const gchar * (*get_mimetype) (NeardRecord *object);

  const gchar * (*get_name) (NeardRecord *object);

  const gchar * (*get_representation) (NeardRecord *object);

  guint  (*get_size) (NeardRecord *object);

  const gchar * (*get_type_) (NeardRecord *object);

  const gchar * (*get_uri) (NeardRecord *object);

};

GType neard_record_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *neard_record_interface_info (void);
guint neard_record_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *neard_record_get_name (NeardRecord *object);
gchar *neard_record_dup_name (NeardRecord *object);
void neard_record_set_name (NeardRecord *object, const gchar *value);

const gchar *neard_record_get_type_ (NeardRecord *object);
gchar *neard_record_dup_type_ (NeardRecord *object);
void neard_record_set_type_ (NeardRecord *object, const gchar *value);

const gchar *neard_record_get_encoding (NeardRecord *object);
gchar *neard_record_dup_encoding (NeardRecord *object);
void neard_record_set_encoding (NeardRecord *object, const gchar *value);

const gchar *neard_record_get_language (NeardRecord *object);
gchar *neard_record_dup_language (NeardRecord *object);
void neard_record_set_language (NeardRecord *object, const gchar *value);

const gchar *neard_record_get_representation (NeardRecord *object);
gchar *neard_record_dup_representation (NeardRecord *object);
void neard_record_set_representation (NeardRecord *object, const gchar *value);

const gchar *neard_record_get_uri (NeardRecord *object);
gchar *neard_record_dup_uri (NeardRecord *object);
void neard_record_set_uri (NeardRecord *object, const gchar *value);

const gchar *neard_record_get_mimetype (NeardRecord *object);
gchar *neard_record_dup_mimetype (NeardRecord *object);
void neard_record_set_mimetype (NeardRecord *object, const gchar *value);

guint neard_record_get_size (NeardRecord *object);
void neard_record_set_size (NeardRecord *object, guint value);

const gchar *neard_record_get_action (NeardRecord *object);
gchar *neard_record_dup_action (NeardRecord *object);
void neard_record_set_action (NeardRecord *object, const gchar *value);

const gchar *neard_record_get_android_package (NeardRecord *object);
gchar *neard_record_dup_android_package (NeardRecord *object);
void neard_record_set_android_package (NeardRecord *object, const gchar *value);


/* ---- */

#define NEARD_TYPE_RECORD_PROXY (neard_record_proxy_get_type ())
#define NEARD_RECORD_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_RECORD_PROXY, NeardRecordProxy))
#define NEARD_RECORD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_RECORD_PROXY, NeardRecordProxyClass))
#define NEARD_RECORD_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_RECORD_PROXY, NeardRecordProxyClass))
#define NEARD_IS_RECORD_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_RECORD_PROXY))
#define NEARD_IS_RECORD_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_RECORD_PROXY))

typedef struct _NeardRecordProxy NeardRecordProxy;
typedef struct _NeardRecordProxyClass NeardRecordProxyClass;
typedef struct _NeardRecordProxyPrivate NeardRecordProxyPrivate;

struct _NeardRecordProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  NeardRecordProxyPrivate *priv;
};

struct _NeardRecordProxyClass
{
  GDBusProxyClass parent_class;
};

GType neard_record_proxy_get_type (void) G_GNUC_CONST;

void neard_record_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardRecord *neard_record_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
NeardRecord *neard_record_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void neard_record_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
NeardRecord *neard_record_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
NeardRecord *neard_record_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NEARD_TYPE_RECORD_SKELETON (neard_record_skeleton_get_type ())
#define NEARD_RECORD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_RECORD_SKELETON, NeardRecordSkeleton))
#define NEARD_RECORD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_RECORD_SKELETON, NeardRecordSkeletonClass))
#define NEARD_RECORD_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_RECORD_SKELETON, NeardRecordSkeletonClass))
#define NEARD_IS_RECORD_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_RECORD_SKELETON))
#define NEARD_IS_RECORD_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_RECORD_SKELETON))

typedef struct _NeardRecordSkeleton NeardRecordSkeleton;
typedef struct _NeardRecordSkeletonClass NeardRecordSkeletonClass;
typedef struct _NeardRecordSkeletonPrivate NeardRecordSkeletonPrivate;

struct _NeardRecordSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  NeardRecordSkeletonPrivate *priv;
};

struct _NeardRecordSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType neard_record_skeleton_get_type (void) G_GNUC_CONST;

NeardRecord *neard_record_skeleton_new (void);


/* ---- */

#define NEARD_TYPE_OBJECT (neard_object_get_type ())
#define NEARD_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_OBJECT, NeardObject))
#define NEARD_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_OBJECT))
#define NEARD_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NEARD_TYPE_OBJECT, NeardObject))

struct _NeardObject;
typedef struct _NeardObject NeardObject;
typedef struct _NeardObjectIface NeardObjectIface;

struct _NeardObjectIface
{
  GTypeInterface parent_iface;
};

GType neard_object_get_type (void) G_GNUC_CONST;

NeardAdapter *neard_object_get_adapter (NeardObject *object);
NeardNDEFAgent *neard_object_get_ndefagent (NeardObject *object);
NeardHandoverAgent *neard_object_get_handover_agent (NeardObject *object);
NeardManager *neard_object_get_manager (NeardObject *object);
NeardAgentManager *neard_object_get_agent_manager (NeardObject *object);
NeardTag *neard_object_get_tag (NeardObject *object);
NeardDevice *neard_object_get_device (NeardObject *object);
NeardRecord *neard_object_get_record (NeardObject *object);
NeardAdapter *neard_object_peek_adapter (NeardObject *object);
NeardNDEFAgent *neard_object_peek_ndefagent (NeardObject *object);
NeardHandoverAgent *neard_object_peek_handover_agent (NeardObject *object);
NeardManager *neard_object_peek_manager (NeardObject *object);
NeardAgentManager *neard_object_peek_agent_manager (NeardObject *object);
NeardTag *neard_object_peek_tag (NeardObject *object);
NeardDevice *neard_object_peek_device (NeardObject *object);
NeardRecord *neard_object_peek_record (NeardObject *object);

#define NEARD_TYPE_OBJECT_PROXY (neard_object_proxy_get_type ())
#define NEARD_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_OBJECT_PROXY, NeardObjectProxy))
#define NEARD_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_OBJECT_PROXY, NeardObjectProxyClass))
#define NEARD_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_OBJECT_PROXY, NeardObjectProxyClass))
#define NEARD_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_OBJECT_PROXY))
#define NEARD_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_OBJECT_PROXY))

typedef struct _NeardObjectProxy NeardObjectProxy;
typedef struct _NeardObjectProxyClass NeardObjectProxyClass;
typedef struct _NeardObjectProxyPrivate NeardObjectProxyPrivate;

struct _NeardObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  NeardObjectProxyPrivate *priv;
};

struct _NeardObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType neard_object_proxy_get_type (void) G_GNUC_CONST;
NeardObjectProxy *neard_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define NEARD_TYPE_OBJECT_SKELETON (neard_object_skeleton_get_type ())
#define NEARD_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_OBJECT_SKELETON, NeardObjectSkeleton))
#define NEARD_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_OBJECT_SKELETON, NeardObjectSkeletonClass))
#define NEARD_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_OBJECT_SKELETON, NeardObjectSkeletonClass))
#define NEARD_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_OBJECT_SKELETON))
#define NEARD_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_OBJECT_SKELETON))

typedef struct _NeardObjectSkeleton NeardObjectSkeleton;
typedef struct _NeardObjectSkeletonClass NeardObjectSkeletonClass;
typedef struct _NeardObjectSkeletonPrivate NeardObjectSkeletonPrivate;

struct _NeardObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  NeardObjectSkeletonPrivate *priv;
};

struct _NeardObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType neard_object_skeleton_get_type (void) G_GNUC_CONST;
NeardObjectSkeleton *neard_object_skeleton_new (const gchar *object_path);
void neard_object_skeleton_set_adapter (NeardObjectSkeleton *object, NeardAdapter *interface_);
void neard_object_skeleton_set_ndefagent (NeardObjectSkeleton *object, NeardNDEFAgent *interface_);
void neard_object_skeleton_set_handover_agent (NeardObjectSkeleton *object, NeardHandoverAgent *interface_);
void neard_object_skeleton_set_manager (NeardObjectSkeleton *object, NeardManager *interface_);
void neard_object_skeleton_set_agent_manager (NeardObjectSkeleton *object, NeardAgentManager *interface_);
void neard_object_skeleton_set_tag (NeardObjectSkeleton *object, NeardTag *interface_);
void neard_object_skeleton_set_device (NeardObjectSkeleton *object, NeardDevice *interface_);
void neard_object_skeleton_set_record (NeardObjectSkeleton *object, NeardRecord *interface_);

/* ---- */

#define NEARD_TYPE_OBJECT_MANAGER_CLIENT (neard_object_manager_client_get_type ())
#define NEARD_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NEARD_TYPE_OBJECT_MANAGER_CLIENT, NeardObjectManagerClient))
#define NEARD_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NEARD_TYPE_OBJECT_MANAGER_CLIENT, NeardObjectManagerClientClass))
#define NEARD_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEARD_TYPE_OBJECT_MANAGER_CLIENT, NeardObjectManagerClientClass))
#define NEARD_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEARD_TYPE_OBJECT_MANAGER_CLIENT))
#define NEARD_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NEARD_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _NeardObjectManagerClient NeardObjectManagerClient;
typedef struct _NeardObjectManagerClientClass NeardObjectManagerClientClass;
typedef struct _NeardObjectManagerClientPrivate NeardObjectManagerClientPrivate;

struct _NeardObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  NeardObjectManagerClientPrivate *priv;
};

struct _NeardObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType neard_object_manager_client_get_type (void) G_GNUC_CONST;

GType neard_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void neard_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *neard_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *neard_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void neard_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *neard_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *neard_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __SRC_GENERATED_CODE_H__ */
